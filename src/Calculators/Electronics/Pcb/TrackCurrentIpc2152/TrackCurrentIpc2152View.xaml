<UserControl x:Class="NinjaCalc.Calculators.Electronics.Pcb.TrackCurrentIpc2152.TrackCurrentIpc2152View"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
             xmlns:local_core_view="clr-namespace:NinjaCalc.Core.View"
             xmlns:local ="clr-namespace:NinjaCalc.Calculators.Electronics.Pcb.TrackCurrentIpc2152"
             xmlns:sys="clr-namespace:System;assembly=mscorlib"
             mc:Ignorable="d" 
             d:DesignWidth="1200" d:DesignHeight="700"
             HorizontalAlignment="Center"
             VerticalAlignment="Center">

    <UserControl.Resources>

        <!-- Simple Expander Button's Template-->
        <ControlTemplate x:Key="SimpleExpanderButtonTemp" TargetType="{x:Type ToggleButton}">
            <Border x:Name="ExpanderButtonBorder"
                    Background="{TemplateBinding Background}"
                    BorderBrush="{TemplateBinding BorderBrush}"
                    BorderThickness="{TemplateBinding BorderThickness}"
                    Padding="{TemplateBinding Padding}"
                    >
                <Grid>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto"/>
                        <ColumnDefinition Width="*"/>
                    </Grid.ColumnDefinitions>
                    <Rectangle Fill="Transparent"
                               Grid.ColumnSpan="2"/>
                    <Ellipse Name="Circle"
                         Grid.Column="0"
                         Stroke="DarkGray"
                         Width="20"
                         Height="20"
                         HorizontalAlignment="Center"
                         VerticalAlignment="Center"
                         />
                    <Path x:Name="Sign"
                      Grid.Column="0"
                      Data="M 0,5 H 10 M 5,0 V 10 Z"
                      Stroke="#FF666666"
                      Width="10"
                      Height="10"
                      StrokeThickness="2"
                      HorizontalAlignment="Center"
                      VerticalAlignment="Center"
                      RenderTransformOrigin="0.5,0.5"
                      />
                    <ContentPresenter x:Name="HeaderContent"
                                  Grid.Column="1"
                                  Margin="4,0,0,0"
                                  ContentSource="Content"/>
                </Grid>
            </Border>
            <ControlTemplate.Triggers>
                <!--Change the sign to minus when toggled-->
                <Trigger Property="IsChecked"
                         Value="True">
                    <Setter Property="Data" TargetName="Sign" Value="M 0,5 H 10 Z"/>
                </Trigger>

                <!-- MouseOver, Pressed behaviours-->
                <Trigger Property="IsMouseOver"
                                 Value="true">
                    <Setter Property="Stroke"
                                    Value="#FF3C7FB1"
                                    TargetName="Circle"/>
                    <Setter Property="Stroke"
                                    Value="#222"
                                    TargetName="Sign"/>
                </Trigger>
                <Trigger Property="IsPressed"
                                 Value="true">
                    <Setter Property="Stroke"
                                    Value="#FF526C7B"
                                    TargetName="Circle"/>
                    <Setter Property="StrokeThickness"
                                    Value="1.5"
                                    TargetName="Circle"/>
                    <Setter Property="Stroke"
                                    Value="#FF003366"
                                    TargetName="Sign"/>
                </Trigger>
            </ControlTemplate.Triggers>
        </ControlTemplate>

        <!-- Simple Expander Template-->
        <ControlTemplate x:Key="SimpleExpanderTemp" TargetType="{x:Type Expander}">
            <DockPanel>
                <ToggleButton x:Name="ExpanderButton" 
                              DockPanel.Dock="Top"
                              Template="{StaticResource SimpleExpanderButtonTemp}"
                              Content="{TemplateBinding Header}"
                              IsChecked="{Binding Path=IsExpanded, RelativeSource={RelativeSource TemplatedParent}}"
                              OverridesDefaultStyle="True"
                              Padding="1.5,0">
                </ToggleButton>
                <ContentPresenter x:Name="ExpanderContent"
                                  Grid.Row="1" 
                                  Visibility="Collapsed"
                                  DockPanel.Dock="Bottom"/>
            </DockPanel>
            <ControlTemplate.Triggers>
                <Trigger Property="IsExpanded" Value="True">
                    <Setter TargetName="ExpanderContent" Property="Visibility" Value="Visible"/>
                </Trigger>
            </ControlTemplate.Triggers>
        </ControlTemplate>

        <!-- Animated Expander Button's Template-->
        <ControlTemplate x:Key="AnimatedExpanderButtonTemp" TargetType="{x:Type ToggleButton}">
            <Border x:Name="ExpanderButtonBorder"
                    Background="{TemplateBinding Background}"
                    BorderBrush="{TemplateBinding BorderBrush}"
                    BorderThickness="{TemplateBinding BorderThickness}"
                    Padding="{TemplateBinding Padding}"
                    >
                <Grid>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto"/>
                        <ColumnDefinition Width="*"/>
                    </Grid.ColumnDefinitions>
                    <Rectangle Fill="Transparent"
                               Grid.ColumnSpan="2"/>
                    <Ellipse Name="Circle"
                         Grid.Column="0"
                         Stroke="DarkGray"
                         Width="20"
                         Height="20"
                         HorizontalAlignment="Center"
                         VerticalAlignment="Center"
                         />
                    <Path x:Name="Arrow"
                      Grid.Column="0"
                      Data="M 1,1.5 L 4.5,5 8,1.5"
                      Stroke="#FF666666"
                      StrokeThickness="2"
                      HorizontalAlignment="Center"
                      VerticalAlignment="Center"
                      RenderTransformOrigin="0.5,0.5"
                      >
                        <Path.RenderTransform>
                            <RotateTransform Angle="0"/>
                        </Path.RenderTransform>
                    </Path>
                    <ContentPresenter x:Name="HeaderContent"
                                      Grid.Column="1"
                                      Margin="4,0,0,0"
                                      ContentSource="Content"/>
                </Grid>
            </Border>
            <ControlTemplate.Triggers>
                <!-- Animate arrow when toggled-->
                <Trigger Property="IsChecked"
                         Value="True">
                    <Trigger.EnterActions>
                        <BeginStoryboard>
                            <Storyboard>
                                <DoubleAnimation Storyboard.TargetName="Arrow"
                                                 Storyboard.TargetProperty="(Path.RenderTransform).(RotateTransform.Angle)"
                                                 To="180"
                                                 Duration="0:0:0.4"/>
                            </Storyboard>
                        </BeginStoryboard>
                    </Trigger.EnterActions>
                    <Trigger.ExitActions>
                        <BeginStoryboard>
                            <Storyboard>
                                <DoubleAnimation Storyboard.TargetName="Arrow"
                                                 Storyboard.TargetProperty="(Path.RenderTransform).(RotateTransform.Angle)"
                                                 To="0"
                                                 Duration="0:0:0.4"/>
                            </Storyboard>
                        </BeginStoryboard>
                    </Trigger.ExitActions>
                </Trigger>

                <!-- MouseOver, Pressed behaviours-->
                <Trigger Property="IsMouseOver"
                                 Value="true">
                    <Setter Property="Stroke"
                                    Value="#FF3C7FB1"
                                    TargetName="Circle"/>
                    <Setter Property="Stroke"
                                    Value="#222"
                                    TargetName="Arrow"/>
                </Trigger>
                <Trigger Property="IsPressed"
                                 Value="true">
                    <Setter Property="Stroke"
                                    Value="#FF526C7B"
                                    TargetName="Circle"/>
                    <Setter Property="StrokeThickness"
                                    Value="1.5"
                                    TargetName="Circle"/>
                    <Setter Property="Stroke"
                                    Value="#FF003366"
                                    TargetName="Arrow"/>
                </Trigger>
            </ControlTemplate.Triggers>
        </ControlTemplate>

        <!-- Stretch Out Content Expander's Template,
        Uses: AnimatedExpanderButtonTemp from above-->
        <ControlTemplate x:Key="StretchyExpanderTemp" TargetType="{x:Type Expander}">
            <DockPanel>
                <ToggleButton x:Name="ExpanderButton" 
                              DockPanel.Dock="Top"
                              Template="{StaticResource AnimatedExpanderButtonTemp}"
                              Content="{TemplateBinding Header}"
                              IsChecked="{Binding Path=IsExpanded, RelativeSource={RelativeSource TemplatedParent}}"
                              OverridesDefaultStyle="True"
                              Padding="1.5,0">
                </ToggleButton>
                <ContentPresenter x:Name="ExpanderContent"
                                  ContentSource="Content"
                                  DockPanel.Dock="Bottom"
                                  >
                    <ContentPresenter.LayoutTransform>
                        <ScaleTransform ScaleY="0"/>
                    </ContentPresenter.LayoutTransform>
                </ContentPresenter>
            </DockPanel>
            <ControlTemplate.Triggers>
                <Trigger Property="IsExpanded" Value="True">
                    <Trigger.EnterActions>
                        <BeginStoryboard>
                            <Storyboard>
                                <DoubleAnimation Storyboard.TargetName="ExpanderContent"
                                                 Storyboard.TargetProperty="(ContentPresenter.LayoutTransform).(ScaleTransform.ScaleY)"                                                 
                                                 To="1"
                                                 Duration="0:0:0.4"/>
                            </Storyboard>
                        </BeginStoryboard>
                    </Trigger.EnterActions>
                    <Trigger.ExitActions>
                        <BeginStoryboard>
                            <Storyboard>
                                <DoubleAnimation Storyboard.TargetName="ExpanderContent"
                                                 Storyboard.TargetProperty="(ContentPresenter.LayoutTransform).(ScaleTransform.ScaleY)"
                                                 To="0"
                                                 Duration="0:0:0.4"/>
                            </Storyboard>
                        </BeginStoryboard>
                    </Trigger.ExitActions>
                </Trigger>

            </ControlTemplate.Triggers>
        </ControlTemplate>

        <!-- Slide Out Content Expander's Template, 
        Uses: AnimatedExpanderButtonTemp from above, 
              MultiplyConverter in codebehind-->
        <local:MultiplyConverter x:Key="multiplyConverter" />
        <ControlTemplate x:Key="RevealExpanderTemp" TargetType="{x:Type Expander}">
            <DockPanel>
                <ToggleButton x:Name="ExpanderButton" 
                              DockPanel.Dock="Top"
                              Template="{StaticResource AnimatedExpanderButtonTemp}"
                              Content="{TemplateBinding Header}"
                              IsChecked="{Binding Path=IsExpanded, RelativeSource={RelativeSource TemplatedParent}}"
                              OverridesDefaultStyle="True"
                              Padding="1.5,0">
                </ToggleButton>
                <ScrollViewer x:Name="ExpanderContentScrollView" DockPanel.Dock="Bottom"
                              HorizontalScrollBarVisibility="Hidden"
                              VerticalScrollBarVisibility="Hidden"
                              HorizontalContentAlignment="Stretch"
                              VerticalContentAlignment="Bottom"
                              >
                    <ScrollViewer.Tag>
                        <sys:Double>0.0</sys:Double>
                    </ScrollViewer.Tag>
                    <ScrollViewer.Height>
                        <MultiBinding Converter="{StaticResource multiplyConverter}">
                            <Binding Path="ActualHeight" ElementName="ExpanderContent"/>
                            <Binding Path="Tag" RelativeSource="{RelativeSource Self}" />
                        </MultiBinding>
                    </ScrollViewer.Height>
                    <ContentPresenter x:Name="ExpanderContent" ContentSource="Content"/>
                </ScrollViewer>
            </DockPanel>
            <ControlTemplate.Triggers>
                <Trigger Property="IsExpanded" Value="True">
                    <Trigger.EnterActions>
                        <BeginStoryboard>
                            <Storyboard>
                                <DoubleAnimation Storyboard.TargetName="ExpanderContentScrollView"
                                                 Storyboard.TargetProperty="Tag"                                                 
                                                 To="1"
                                                 Duration="0:0:0.4"/>
                            </Storyboard>
                        </BeginStoryboard>
                    </Trigger.EnterActions>
                    <Trigger.ExitActions>
                        <BeginStoryboard>
                            <Storyboard>
                                <DoubleAnimation Storyboard.TargetName="ExpanderContentScrollView"
                                                 Storyboard.TargetProperty="Tag"                                                 
                                                 To="0"
                                                 Duration="0:0:0.4"/>
                            </Storyboard>
                        </BeginStoryboard>
                    </Trigger.ExitActions>
                </Trigger>
            </ControlTemplate.Triggers>
        </ControlTemplate>


    </UserControl.Resources>

    <!-- Allows calculator content to scroll vertically when "Info" is expanded -->
    <ScrollViewer VerticalScrollBarVisibility="Auto">
        <Grid>
            <Grid.RowDefinitions>
                <!-- "Info" section takes up the minimum space it needs -->
                <RowDefinition Height="Auto" />
                <!-- Let calculator take up remaining space -->
                <RowDefinition Height="*" />
            </Grid.RowDefinitions>

            <!-- =========== INFO SECTION ========== -->
            <RichTextBox Grid.Row="0" Name="rtb" IsDocumentEnabled="True" Height="Auto" BorderThickness="0">
                <FlowDocument >
                    <Paragraph >
                        <InlineUIContainer >
                            <Expander Header="Info" Template="{StaticResource RevealExpanderTemp}">
                                <StackPanel>
                                    <TextBlock x:Name="InfoText" TextWrapping="Wrap">
                                    This calculator can find the minimum allowed PCB track width for a given continuous current. Takes into account the allowed temperature rise, copper track thickness, proximity to planes, total thickness of the PCB, and PCB material in accordance with IPC-2152.
                                    <LineBreak /><LineBreak />
	                                The calculator uses equations built from the data provided in the IPC-2152 graphs.Data points were extracted from the graphs using http:/arohatgi.info/WebPlotDigitizer/ (a great program by-the-way). Suitable trend lines were then fitted. In the case of the three variable graphs, trend lines were fitted to the coefficients of the first set of trend lines.
                                    <LineBreak /><LineBreak />
                                    I believe the accuracy of the calculator (w.r.t. the IPC-2152 graphs) to be quite high, within the range of data provided by these graphs. Outside of this, extrapolation could become inaccurate quickly, due to the use of 5th order polynomial's being used to model some of the data (this was the best choice). Other graph were modelled with power equations of the form y=Ax^B, and are likely to be more accurate that the polynomial during extrapolation.
                                    <LineBreak /><LineBreak />
                                    Below is an example of the trend-line fitting process. This image shows the "Copper Thickness Modifier" data from IPC-2152, along with 5th order polynomials being fitted to each data set. The data for the 3oz. copper weight is a horizontal line at y=1 by definition.
                                    <LineBreak /><LineBreak />
	                                /lib/eng-calcs-js/pcb-track-current-capability-ipc-2152/ipc-2152-copper-thickness-modifier-graph-with-trendlines.png
                                    <LineBreak /><LineBreak />
	                                The co-efficients of the above trend lines were then plotted against copper weight (aka. track thickness). The graph below is co-efficient C5 (the co-efficient infront of x^5) against copper weight. These had their own trend lines fitted. Note that there are only four data points, AND the fitted trend-line is a third-degree polynomial, which is guaranteed to fit the data perfectly. This is probably the most dangerous part of the "discrete graphed data sets to continuous equations" conversion.
                                    <LineBreak /><LineBreak />
                                    /lib/eng-calcs-js/pcb-track-current-capability-ipc-2152/ipc-2152-copper-thickness-modifier-copper-weight-versus-c5-graph.png
                                    <LineBreak /><LineBreak />
                                    The current in assumed to be constant (DC). However, you can use the RMS value for a pulsed current as long as the pulses are fast enough.
                                    <LineBreak /><LineBreak />
	                                The temperature of the PCB material should NEVER exceed the relative thermal index (RTI) of the material. This is defined in UL746B as the temperature at which 50% of the materials properties are retained after 100,000 hours.
                                    <LineBreak /><LineBreak />
	                                Remember this calculator does not take into account other nearby heat sources.
                                    </TextBlock>
                                </StackPanel>
                            </Expander>
                        </InlineUIContainer>
                    </Paragraph>
                </FlowDocument>
            </RichTextBox>
            <Viewbox Grid.Row="1" Name="MainViewbox" Stretch="Uniform" MinWidth="400" MinHeight="400" MaxWidth="800" MaxHeight="800">

                <Canvas  Background="White" 
                Width="800" Height="700"
                HorizontalAlignment="Center" VerticalAlignment="Center">



                    <Polygon
                Name="Track"
                Points="20,0 200,0 220,50 0,50"
                Stroke="Black" 
                StrokeThickness="3" Canvas.Left="285" Canvas.Top="187">
                        <Polygon.Fill>
                            <SolidColorBrush Color="Orange" Opacity="0.4"/>
                        </Polygon.Fill>
                    </Polygon>
                    <Polygon
                Name="Pcb"
                Points="-100,50 320,50 320,120 -100,120"
                Stroke="Black"
                StrokeThickness="3" Canvas.Left="285" Canvas.Top="187">
                        <Polygon.Fill>
                            <SolidColorBrush Color="Green" Opacity="0.4"/>
                        </Polygon.Fill>
                    </Polygon>

                    <Grid Width="30" Height="30" HorizontalAlignment="Center" Canvas.Left="312" Canvas.Top="197">
                        <Ellipse Width="30" Height="30" Stroke="Black" StrokeThickness="2" />
                        <Ellipse Width="10" Height="10" Stroke="Black" StrokeThickness="2" Fill="Black" />
                    </Grid>
                    <Polygon
                x:Name="Plane"
                Points="-100,50 320,50 320,100 -100,100"
                Stroke="Black"
                StrokeThickness="3" Canvas.Left="285" Canvas.Top="256">
                        <Polygon.Fill>
                            <SolidColorBrush Color="Orange" Opacity="0.4"/>
                        </Polygon.Fill>
                    </Polygon>


                    <local_core_view:Dimension Length="200" Canvas.Left="292" Canvas.Top="166" />

                    <Canvas Height="53" Canvas.Left="159" Canvas.Top="148" Width="115">
                        <Label FontSize="16" Content="Track Current"/>
                        <TextBox x:Name="TrackCurrentValue" Width="80" BorderThickness="3" Canvas.Top="31"/>
                        <ComboBox x:Name="TrackCurrentUnits" Canvas.Left="85" Canvas.Top="31"/>
                    </Canvas>
                    <Canvas Height="53" Canvas.Left="150" Canvas.Top="18" Width="220">
                        <Label FontSize="16" Content="Temp. Rise" Canvas.Left="55"/>
                        <TextBox x:Name="TempRiseValue" Width="80" BorderThickness="3" Canvas.Top="31" Canvas.Left="55"/>
                        <ComboBox x:Name="TempRiseUnits" Canvas.Left="140" Canvas.Top="31"/>
                        <Image Source="temperature-icon.jpg" Height="64" Width="87" Canvas.Left="-23"/>
                    </Canvas>

                    <Canvas Height="102" Canvas.Left="612" Canvas.Top="160" Width="180">
                        <local_core_view:Dimension Length="45" Canvas.Left="19" Canvas.Top="30">
                            <local_core_view:Dimension.LayoutTransform>
                                <RotateTransform Angle="90"/>
                            </local_core_view:Dimension.LayoutTransform>
                        </local_core_view:Dimension>
                        <Label FontSize="16" Content="Track Thickness" Canvas.Left="36" Canvas.Top="21"/>
                        <TextBox x:Name="TrackThicknessValue" Width="80" BorderThickness="3" Canvas.Top="57" Canvas.Left="36"/>
                        <ComboBox x:Name="TrackThicknessUnits" Canvas.Left="121" Canvas.Top="57"/>
                        <local_core_view:Dimension x:Name="BoardThicknessDimension" Length="170" Canvas.Left="-479" Canvas.Top="25">
                            <local_core_view:Dimension.LayoutTransform>
                                <RotateTransform Angle="90"/>
                            </local_core_view:Dimension.LayoutTransform>
                        </local_core_view:Dimension>
                        <local_core_view:Dimension Length="70" Canvas.Left="19" Canvas.Top="78">
                            <local_core_view:Dimension.LayoutTransform>
                                <RotateTransform Angle="90"/>
                            </local_core_view:Dimension.LayoutTransform>
                        </local_core_view:Dimension>
                    </Canvas>

                    <Label FontSize="16" Content="Board Thickness" Canvas.Left="4" Canvas.Top="220"/>
                    <TextBox x:Name="BoardThicknessValue" Width="80" BorderThickness="3" Canvas.Top="256" Canvas.Left="4" />
                    <ComboBox x:Name="BoardThicknessUnits" Canvas.Left="89" Canvas.Top="256"/>
                    <Canvas Height="58" Canvas.Left="322" Canvas.Top="88" Width="158">
                        <Label Content="Min. Track Width" FontSize="16" Canvas.Left="10" Canvas.Top="5"/>
                        <TextBox x:Name="MinTrackWidthValue" Width="100" Height="21" BorderThickness="3" Canvas.Left="9" Canvas.Top="36"/>
                        <ComboBox x:Name="MinTrackWidthUnits" Canvas.Top="36" Canvas.Left="114"/>
                    </Canvas>
                    <Grid Width="30" Height="30" HorizontalAlignment="Center" Canvas.Left="381" Canvas.Top="197">
                        <Ellipse Width="30" Height="30" Stroke="Black" StrokeThickness="2" />
                        <Ellipse Width="10" Height="10" Stroke="Black" StrokeThickness="2" Fill="Black" />
                    </Grid>
                    <Grid Width="30" Height="30" HorizontalAlignment="Center" Canvas.Left="450" Canvas.Top="197">
                        <Ellipse Width="30" Height="30" Stroke="Black" StrokeThickness="2" />
                        <Ellipse Width="10" Height="10" Stroke="Black" StrokeThickness="2" Fill="Black" />
                    </Grid>

                    <!-- EXTRA PARAMETERS -->

                    <Label FontSize="16" Content="Unadjusted Track Cross-sectional Area" Canvas.Left="158" Canvas.Top="524"/>
                    <TextBox x:Name="UnadjustedTrackCrossSectionalAreaValue" Width="100" BorderThickness="3" Canvas.Top="533" Canvas.Left="458"/>
                    <ComboBox x:Name="UnadjustedTrackCrossSectionalAreaUnits" Canvas.Left="579" Canvas.Top="533"/>

                    <Label FontSize="16" Content="Track Thickness Modifier" Canvas.Left="158" Canvas.Top="551"/>
                    <TextBox x:Name="TrackThicknessModifierValue" Width="100" BorderThickness="3" Canvas.Top="560" Canvas.Left="458"/>
                    <ComboBox x:Name="TrackThicknessModifierUnits" Canvas.Left="579" Canvas.Top="560"/>

                    <Label FontSize="16" Content="Board Thickness Modifier" Canvas.Left="158" Canvas.Top="578"/>
                    <TextBox x:Name="BoardThicknessModifierValue" Width="100" BorderThickness="3" Canvas.Top="587" Canvas.Left="458"/>
                    <ComboBox x:Name="BoardThicknessModifierUnits" Canvas.Left="579" Canvas.Top="587"/>

                    <Label Content="Is Plane Present?" FontSize="16" Canvas.Left="520" Canvas.Top="403"/>
                    <ComboBox x:Name="IsPlanePresent" Width="100" Canvas.Left="530" Canvas.Top="439" />
                    <Canvas Name="PlaneProximityCanvas" Height="53" Canvas.Left="650" Canvas.Top="256" Width="119">
                        <Label FontSize="16" Content="Plane Proximity"/>
                        <TextBox x:Name="PlaneProximityValue" Width="80" BorderThickness="3" Canvas.Top="31"/>
                        <ComboBox x:Name="PlaneProximityUnits" Canvas.Left="86" Canvas.Top="31"/>
                    </Canvas>

                    <Label FontSize="16" Content="Plane Proximity Modifier" Canvas.Left="158" Canvas.Top="605"/>
                    <TextBox x:Name="PlaneProximityModifierValue" Width="100" BorderThickness="3" Canvas.Top="614" Canvas.Left="458"/>
                    <ComboBox x:Name="PlaneProximityModifierUnits" Canvas.Left="579" Canvas.Top="614"/>

                    <Label FontSize="16" Content="Thermal Conductivity" Canvas.Left="150" Canvas.Top="425"/>
                    <TextBox x:Name="ThermalConductivityValue" Width="80" BorderThickness="3" Canvas.Top="456" Canvas.Left="159"/>
                    <ComboBox x:Name="ThermalConductivityUnits" Canvas.Left="246" Canvas.Top="456"/>

                    <Label FontSize="16" Content="Thermal Conductivity Modifier" Canvas.Left="158" Canvas.Top="632"/>
                    <TextBox x:Name="ThermalConductivityModifierValue" Width="100" BorderThickness="3" Canvas.Top="641" Canvas.Left="458"/>
                    <ComboBox x:Name="ThermalConductivityModifierUnits" Canvas.Left="579" Canvas.Top="641"/>

                    <Label FontSize="16" Content="Adjusted Cross-Sectional Area" Canvas.Left="158" Canvas.Top="659"/>
                    <TextBox x:Name="AdjustedCrossSectionalAreaValue" Width="100" BorderThickness="3" Canvas.Top="668" Canvas.Left="458"/>
                    <ComboBox x:Name="AdjustedCrossSectionalAreaUnits" Canvas.Left="579" Canvas.Top="668"/>

                </Canvas>

            </Viewbox>
        </Grid>
    </ScrollViewer>
</UserControl>
